#this script will accept a 

import os
import re
import pandas as pd

# === CONFIGURATION ===

PROPOSITION_FOLDER = 'propositionsprogram/alla_propositioner'  # many .txt files with potential references
#we only want to use the propositions included in the file 109_props_relevanta.csv
with open('propositionsprogram/109_props_relevanta.csv', 'r') as f:
    #create a dataframe
    df_props = pd.read_csv(f, delimiter=';')
    
    top_prop_filenames = df_props["Filename"].tolist() 

OUTPUT_FILE = 'implementeringprogram/implementation_scores_top100.csv'

#previous data generated by bow_script.py
#alla_souer_sorterade_efter_relevans_malin.csv contains the column "Document Name" with the report IDs formated like sou_2000_102-d1.txt or sou_2000_104.txt
#we need to extract the report IDs from the filenames and check if they are mentioned in the proposition text
#the report IDs are formatted like (SOU 2000:102) or (SOU 2000:104) in the output file
with open('SOU_hanteringsprogram/differensskript/alla_souer_sorterade_efter_relevans.csv', 'r', encoding='utf-8') as f:
    #create a dataframe
    df = pd.read_csv(f, delimiter=';', encoding='utf-8')
    #extract the report IDs as a list from the column "DocumentName"
    #format: ['sou_2000_102-d1.txt', 'sou_2000_104.txt', ...]
    report_df_ids = df["DocumentName"].tolist() #format: ['sou_2000_102-d1.txt', 'sou_2000_104.txt', ...]

# === STEP 1: EXTRACT REPORT IDENTIFIERS ===
def extract_report_ids(report_ids):
    ids = []
    for fname in report_ids:
        # Assuming the filenames are like 'sou_2000_6-d1.txt' or 'sou_2000_104.txt'
            # Extracting the report ID from the filename
            # Example: 'sou_2000_6-d1.txt' -> '(SOU 2000:6)'
            id = re.search(r'sou_(\d{4})_(\d+)', fname)
            if id:
                year = id.group(1)
                number = id.group(2).split('-')[0]
            ids.append(f'(SOU {year}:{number})')
    return ids #format: (SOU 2000:102), (SOU 2000:104), etc.

# === STEP 2: LOAD ALL PROPOSITIONS INTO MEMORY (or stream if needed) ===
def load_all_propositions(folder):
    full_text = []
    for fname in os.listdir(folder):
        if fname in top_prop_filenames: #only load the relevant propositions
            path = os.path.join(folder, fname)
            with open(path, 'r', encoding='utf-8', errors='ignore') as f:
                full_text.append(f.read())
    return '\n'.join(full_text)

# === STEP 3: CHECK IF EACH REPORT ID IS MENTIONED ===
def find_mentions(report_ids, proposition_text):
    result = {}
    for i in range(len(report_ids)):
        result[report_df_ids[i]] = report_ids[i] in proposition_text
    return result #format {sou_2000_102.txt: True, sou_2000_104.txt: False, ... }

# === STEP 4: MAIN FUNCTION ===
def main():
    report_ids = extract_report_ids(report_df_ids) #format: (SOU 2000:102), (SOU 2000:104), etc.
    print(f'Extracted {len(report_ids)} report identifiers from {len(report_df_ids)} filenames.')
    
    proposition_text = load_all_propositions(PROPOSITION_FOLDER)
    print(f'Loaded all proposition text. Total length: {len(proposition_text)} characters.')

    mentions = find_mentions(report_ids, proposition_text) #format: { (SOU 2000:102): True, (SOU 2000:104): False, ... }
    #save the results into the previously used df at column new column"Mentioned" 
    df['Mentioned'] = df['DocumentName'].map(mentions) #format: {sou_2000_102.txt: True, sou_2000_104.txt: False, ... }
    #save the df to the output file, note that semicolon is used as delimiter
    df.to_csv(OUTPUT_FILE, sep=';', index=False, encoding='utf-8')
    print(f'Saved results to {OUTPUT_FILE}.')
if __name__ == '__main__':
    main()
